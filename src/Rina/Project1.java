/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Project1.java
 *
 * Created on Apr 13, 2010, 4:36:27 PM
 */

package Rina;

import Imal.playSond;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Project1 extends javax.swing.JFrame {

    ImageIcon iDis = new ImageIcon(playSond.path_reso+"/JasperReports/"+"images.jpg","");
    static Project1 f1;
    String ContractorInPro = "";


    
    
    public void getData(String ProjectID){


        try{
                Connection con = (Connection) Db.getMyConnection();
                Statement stmt = (Statement) con.createStatement();
                ResultSet rsetsaj = stmt.executeQuery("select * from project where ProjectID = '"+ProjectID+"'");


                if(rsetsaj.next()){


                     tf_p_address.setText(rsetsaj.getString("AddressL1"));
                     tf_p_address1.setText(rsetsaj.getString("AddressL2"));
                     tf_p_address2.setText(rsetsaj.getString("AddressL3"));
                     tf_p_value.setText(rsetsaj.getString("ContractorPrice"));
                     tf_p_paid.setText(rsetsaj.getString("AmountPaid"));
                     tf_p_contractor.setText(rsetsaj.getString("CompanyName"));
                     tf_p_id.setText(ProjectID);
                     tf_p_name.setText(rsetsaj.getString("ProjectName"));
                     System.out.println(rsetsaj.getString("AmountPaid"));

                     int f = Integer.parseInt(rsetsaj.getString("ContractorPrice"));
                     int g = Integer.parseInt(rsetsaj.getString("AmountPaid"));
                     int h = f-g;
                     tf_p_tobepaid.setText(String.valueOf(h));

                                            pb_ProjectProgress.setMinimum(0);
                                            pb_ProjectProgress.setMaximum(100);
                                            pb_ProjectProgress.setValue( g*100/f);

                                            tab_project.setEnabled(false);
                                            rb_p_pro.setEnabled(false);
                                            rb_p_rep.setEnabled(false);
                                           tf_p_year.setText(rsetsaj.getString("Year"));
                                           tf_p_year.setEnabled(false);
                                            cob_map.setVisible(false);
                                            jButton4.setVisible(false);


                }

        }

        catch(Exception e){

            System.out.println(e);

        }
  }


    /** Creates new form Project1 */
    public Project1() {


        initComponents();

        
        label_map.setIcon(iDis);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        cob_map = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tf_p_value = new javax.swing.JTextField();
        tf_p_paid = new javax.swing.JTextField();
        tf_p_tobepaid = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_p_id = new javax.swing.JTextField();
        tf_p_name = new javax.swing.JTextField();
        tf_p_address = new javax.swing.JTextField();
        tf_p_contractor = new javax.swing.JTextField();
        tf_p_address1 = new javax.swing.JTextField();
        tf_p_address2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        label_map = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        rb_p_pro = new javax.swing.JRadioButton();
        rb_p_rep = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        pb_ProjectProgress = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab_project = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        tf_p_year = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        pre1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        cob_map.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select District", "Ampare", "Anuradhapura", "Badulla", "Batticoloa", "Colombo", "Galle", "Gampaha", "Hambantota", "Jaffna", "Kalutara", "Kandy", "Kegalle", "Killinochchi", "Kurunegala", "Mannar", "Matale", "Matara", "Moneragala", "Mullativu", "Nuwara Eliya", "Pollonnaruwa", "Puttlam", "Ratnapura", "Trincomalee", "Vavuniya", "All" }));
        cob_map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cob_mapActionPerformed(evt);
            }
        });

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel7.setText("Total Value");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel15.setText("Amount paid");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Amount to be paid");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel15)
                    .addComponent(jLabel8))
                .addGap(46, 46, 46)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_p_tobepaid, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(tf_p_paid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(tf_p_value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(16, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tf_p_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_p_paid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(tf_p_tobepaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Project ID");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Project Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Address");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("Contractor");

        tf_p_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_p_idActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(54, 54, 54)
                        .addComponent(tf_p_contractor, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_p_id, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_p_name, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(tf_p_address2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(72, 72, 72)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tf_p_address1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_p_address, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)))
                .addGap(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_p_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_p_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_p_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_p_address1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_p_address2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_p_contractor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(14, 14, 14))
        );

        jButton1.setText("View Contractor Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        label_map.setBackground(new java.awt.Color(0, 255, 204));
        label_map.setForeground(new java.awt.Color(0, 102, 102));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel9.setText("Progress of the Project");

        buttonGroup1.add(rb_p_pro);
        rb_p_pro.setFont(new java.awt.Font("Tahoma", 1, 12));
        rb_p_pro.setSelected(true);
        rb_p_pro.setText("Constructions");
        rb_p_pro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_p_proActionPerformed(evt);
            }
        });

        buttonGroup1.add(rb_p_rep);
        rb_p_rep.setFont(new java.awt.Font("Tahoma", 1, 12));
        rb_p_rep.setText("Repairs");
        rb_p_rep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_p_repActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/Play_16x16.png"))); // NOI18N
        jButton2.setText("Advance Bond");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/Critical details.png"))); // NOI18N
        jButton3.setText("Bill Details");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tab_project.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Project ID", "Project Name", "Year"
            }
        ));
        tab_project.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tab_projectMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tab_project);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel10.setText("Year : ");

        tf_p_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_p_yearActionPerformed(evt);
            }
        });
        tf_p_year.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_p_yearKeyReleased(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/Search_16x16.png"))); // NOI18N
        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/Add_16x16.png"))); // NOI18N
        jButton5.setText("Retension Bond");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/statistics_16.png"))); // NOI18N
        jButton6.setText(" Bid & Performance ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        pre1.setFont(new java.awt.Font("Tahoma", 1, 12));

        jLabel11.setFont(new java.awt.Font("Andalus", 1, 28));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Rina/clipboard_32.png"))); // NOI18N
        jLabel11.setText("Projects");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rb_p_pro)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(rb_p_rep)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(8, 8, 8)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tf_p_year, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cob_map, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(label_map, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(93, 93, 93)
                                    .addComponent(pre1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pb_ProjectProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGap(37, 37, 37))
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cob_map, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_p_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(rb_p_pro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rb_p_rep)
                            .addComponent(jButton4))
                        .addGap(12, 12, 12)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_map, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pb_ProjectProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(pre1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton3)
                            .addComponent(jButton1)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-860)/2, (screenSize.height-673)/2, 860, 673);
    }// </editor-fold>//GEN-END:initComponents

    private void cob_mapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cob_mapActionPerformed
          DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
          dft1.setRowCount(0);
          int x = cob_map.getSelectedIndex();
          String req ="" ;

          String path1 =  playSond.path_reso+"/JasperReports/";


           ImageIcon image[] = new ImageIcon[26];

            image[0] = new ImageIcon(path1+"100px-Ampara_district.svg.png","");
            image[1]= new ImageIcon(path1+"100px-Anuradhapura_district.svg.png","");
            image[2]= new ImageIcon(path1+"100px-Badulla_district.svg.png","");
            image[3]= new ImageIcon(path1+"100px-Batticaloa_district.svg.png","");
            image[4]= new ImageIcon(path1+"100px-Colombo_district.svg.png","");
            image[5]= new ImageIcon(path1+"100px-Galle_district.svg.png","");
            image[6]= new ImageIcon(path1+"100px-Gampaha_district.svg.png","");
            image[7] = new ImageIcon(path1+"100px-Hambantota_district.svg.png","");
            image[8]= new ImageIcon(path1+"100px-Jaffna_district.svg.png","");
            image[9] = new ImageIcon(path1+"100px-Kalutara_district.svg.png","");
            image[10]= new ImageIcon(path1+"100px-Kandy_district.svg.png","");
            image[11] = new ImageIcon(path1+"100px-Kegalle_district.svg.png","");
            image[12]= new ImageIcon(path1+"100px-Kilinochchi_district.svg.png","");
            image[13]= new ImageIcon(path1+"100px-Kurunegala_district.svg.png","");
            image[14]= new ImageIcon(path1+"100px-Mannar_district.svg.png","");
            image[15]= new ImageIcon(path1+"100px-Matale_district.svg.png","");
            image[16] = new ImageIcon(path1+"100px-Matara_district.svg.png","");
            image[17]= new ImageIcon(path1+"100px-Moneragala_district.svg.svg.png","");
            image[18]  = new ImageIcon(path1+"100px-Mullaitivu_district.svg.png","");
            image[19]= new ImageIcon(path1+"100px-Nuwara_Eliya_district.svg.png","");
            image[20]= new ImageIcon(path1+"100px-Polonnaruwa_district.svg.png","");
            image[21] = new ImageIcon(path1+"100px-Puttalam_district.svg.png","");
            image[22]= new ImageIcon(path1+"100px-Ratnapura_district.svg.png","");
            image[23] = new ImageIcon(path1+"100px-Trincomalee_district.svg.png","");
            image[24]  = new ImageIcon(path1+"100px-Vavuniya_district.svg.png","");

             if (x==0 |x ==26){

                        label_map.setIcon(iDis);
             }           
              if(x>0 & x<26){
                    label_map.setIcon(image[x-1]);
              }

            try {
                Connection   con = Db.getMyConnection();
                Statement stmt =  con.createStatement();

                ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+cob_map.getSelectedItem().toString()+"' ");
                        
                        while (rset1.next())   {
                             req = rset1.getString("RequestID");
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+req+"'");
                        while(rset2.next()){
                                
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            v2.add(rset2.getString("Year"));
                            dft1.addRow(v2);
                            }
                        }

        } catch (Exception e) {
                System.out.println(e);
        }

            if(x==26){
                 try {
                Connection   con1 = Db.getMyConnection();
                Statement stmt1 =  con1.createStatement();

                ResultSet rset1= stmt1.executeQuery("select RequestID from request ");

                        while (rset1.next())   {
                             req = rset1.getString("RequestID");
                             Statement st = con1.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+req+"'");
                        while(rset2.next()){

                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            v2.add(rset2.getString("Year"));
                            dft1.addRow(v2);
                            }
                        }

        } catch (Exception e) {
                System.out.println(e);
        }

            }

       /*

            ImageIcon iAmp = new ImageIcon("E:/Districts of SL/100px-Ampara_district.svg.png","");
            ImageIcon iAnu = new ImageIcon("E:/Districts of SL/100px-Anuradhapura_district.svg.png","");
            ImageIcon iBad = new ImageIcon("E:/Districts of SL/100px-Badulla_district.svg.png","");
            ImageIcon iBat = new ImageIcon("E:/Districts of SL/100px-Batticaloa_district.svg.png","");
            ImageIcon iCol = new ImageIcon("E:/Districts of SL/100px-Colombo_district.svg.png","");
            ImageIcon iGal = new ImageIcon("E:/Districts of SL/100px-Galle_district.svg.png","");
            ImageIcon iGam = new ImageIcon("E:/Districts of SL/100px-Gampaha_district.svg.png","");
            ImageIcon iHam = new ImageIcon("E:/Districts of SL/100px-Hambantota_district.svg.png","");
            ImageIcon iJaf = new ImageIcon("E:/Districts of SL/100px-Jaffna_district.svg.png","");
            ImageIcon iKal = new ImageIcon("E:/Districts of SL/100px-Kalutara_district.svg.png","");
            ImageIcon iKan = new ImageIcon("E:/Districts of SL/100px-Kandy_district.svg.png","");
            ImageIcon iKeg = new ImageIcon("E:/Districts of SL/100px-Kegalle_district.svg.png","");
            ImageIcon iKil = new ImageIcon("E:/Districts of SL/100px-Kilinochchi_district.svg.png","");
            ImageIcon iKur = new ImageIcon("E:/Districts of SL/100px-Kurunegala_district.svg.png","");
            ImageIcon iMan = new ImageIcon("E:/Districts of SL/100px-Mannar_district.svg.png","");
            ImageIcon iMal = new ImageIcon("E:/Districts of SL/100px-Matale_district.svg.png","");
            ImageIcon iMar = new ImageIcon("E:/Districts of SL/100px-Matara_district.svg.png","");
            ImageIcon iMon = new ImageIcon("E:/Districts of SL/100px-Moneragala_district.svg.svg.png","");
            ImageIcon iMul = new ImageIcon("E:/Districts of SL/100px-Mullaitivu_district.svg.png","");
            ImageIcon iNE = new ImageIcon("E:/Districts of SL/100px-Nuwara_Eliya_district.svg.png","");
            ImageIcon iPol = new ImageIcon("E:/Districts of SL/100px-Polonnaruwa_district.svg.png","");
            ImageIcon iPut = new ImageIcon("E:/Districts of SL/100px-Puttalam_district.svg.png","");
            ImageIcon iRat = new ImageIcon("E:/Districts of SL/100px-Ratnapura_district.svg.png","");
            ImageIcon iTri = new ImageIcon("E:/Districts of SL/100px-Trincomalee_district.svg.png","");
            ImageIcon iVav = new ImageIcon("E:/Districts of SL/100px-Vavuniya_district.svg.png","");


            try {
                Connection   con = Db.getMyConnection();
                Statement stmt =  con.createStatement();

            
            
            if (x==0 |x ==26){

                        label_map.setIcon(iDis);

            } else if (x==1){

                        label_map.setIcon(iAmp);

                        String Amp = "Ampara";
                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Amp+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           
                
                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                    }
              
            } else if (x==2){

                        label_map.setIcon(iAnu);
                        String Anu = "Anuradhapura";
                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Anu+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==3){label_map.setIcon(iBad);
                        String Bad = "Badulla";
                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Bad+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                            

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==4){label_map.setIcon(iBat);

                        String Bat = "Batticoloa";
                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Bat+"' ");

                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);

                            }
                        }

            } else if (x==5){
                
                label_map.setIcon(iCol);

                    String Col = "Colombo";
                    ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Col+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==6){label_map.setIcon(iGal);
                    String Gal = "Galle";
                    ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Gal+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                          

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==7){label_map.setIcon(iGam);
                    String Gam = "Gampaha";
                    ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Gam+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                        

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==8){label_map.setIcon(iHam);
                  String Ham = "Hambantota";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Ham+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==9){label_map.setIcon(iJaf);
                  String Jaf = "Jaffna";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Jaf+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                        

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==10){label_map.setIcon(iKal);
                  String Kal = "Kalutara";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Kal+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==11){label_map.setIcon(iKan);
                  String Kan = "Kandy";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Kan+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                     

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==12){label_map.setIcon(iKeg);
                  String Keg = "Kegalle";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Keg+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==13){label_map.setIcon(iKil);
                  String Kil = "Killinochchi";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Kil+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                      

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==14){label_map.setIcon(iKur);
                  String Kur = "Kurunegala";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Kur+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==15){label_map.setIcon(iMan);
                  String Man = "Mannar";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Man+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             
                
                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }   
              } else if (x==16){label_map.setIcon(iMal);
                    String Mal = "Matale";
                    ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Mal+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                          

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==17){label_map.setIcon(iMar);
                  String Mar = "Matara";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Mar+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==18){label_map.setIcon(iMon);
                  String Mon = "Moneragala";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Mon+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==19){label_map.setIcon(iMul);
                  String Mul = "Mullativu";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Mul+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                            

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==20){label_map.setIcon(iNE);
                  String NE = "Nuwara Eliya";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+NE+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                           

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==21){label_map.setIcon(iPol);
                  String Poll = "Pollonnaruwa";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Poll+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                         

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==22){label_map.setIcon(iPut);
                  String Put = "Puttlam";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Put+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==23){label_map.setIcon(iRat);
                  String Rat = "Ratnapura";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Rat+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                         

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==24){label_map.setIcon(iTri);
                  String Tri = "Trincomalee";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Tri+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                          

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            } else if (x==25){label_map.setIcon(iVav);
                  String Vav = "Vavuniya";
                 ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+Vav+"' ");
                        while (rset1.next())   {
                             Statement st = con.createStatement();
                             ResultSet rset2 = st.executeQuery("select ProjectID,ProjectName from project where RequestID = '"+rset1.getString("RequestID")+"'");
                             

                            while(rset2.next()){
                            Vector v2 = new Vector();
                            v2.add(rset2.getString("ProjectID"));
                            v2.add(rset2.getString("ProjectName"));
                            dft1.addRow(v2);
                            }
                        }
            }
            } catch (Exception e) {
                 System.out.println(e);
            }
        * 
        */


}//GEN-LAST:event_cob_mapActionPerformed

    private void rb_p_proActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_p_proActionPerformed


        DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
        dft1.setRowCount(0);
       
        try {
            Connection con = (Connection) Db.getMyConnection();
            Statement stmt = (Statement) con.createStatement();
            if((rb_p_pro.isSelected())& (!rb_p_rep.isSelected())){

                String a = "Constructions";
                ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName from project where ProjectType = '"+a+"' ");
                 while(rset1.next()){

                     Vector v1 = new Vector();
                     v1.add(rset1.getString("ProjectID"));
                     v1.add(rset1.getString("ProjectName"));
                     v1.add(rset1.getString("Year"));
                    dft1.addRow(v1);
            }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
}//GEN-LAST:event_rb_p_proActionPerformed

    private void rb_p_repActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_p_repActionPerformed

        DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
        dft1.setRowCount(0);

        try {
            Connection con = (Connection) Db.getMyConnection();
            Statement stmt = (Statement) con.createStatement();
            if((!rb_p_pro.isSelected())& (rb_p_rep.isSelected())){

                String a = "Repairs";
                ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName from project where ProjectType = '"+a+"' ");
                 while(rset1.next()){

                     Vector v1 = new Vector();
                     v1.add(rset1.getString("ProjectID"));
                     v1.add(rset1.getString("ProjectName"));
                     v1.add(rset1.getString("Year"));
                    dft1.addRow(v1);
            }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
}//GEN-LAST:event_rb_p_repActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    playSond.ButtonClick();
        String probill22 = tf_p_id.getText();;
            System.out.println(probill22);
    String probilamt = tf_p_tobepaid.getText();
            System.out.println(probilamt);
    bill2 b = new bill2();
    b.probill2(probill22 );
    b.probill3(probilamt);
    b.probill4(probill22);
   
    b.setVisible(true);

 /*try{

              String reportSource = "E:/MyReports/BillDetails.jrxml";
            Map<String, Object>params = new HashMap<String, Object>();

           // params.put("para2",jTextField1.getText());

            JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql:///justice","root","");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params,con);


            con.close();

            JRViewer h = new JRViewer(jasperPrint);
           **************b1.b_tabbedpane.add("Bills Issued", h);
            h.setZoomRatio((float) 0.40);
        }catch(Exception e){
        }*/
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 //******* to be coded to lead to an interface of sajeewa
playSond.ButtonClick();
        if(!ContractorInPro.equals("")){
     contractorview12 vi1 = new contractorview12();
     this.dispose();
     vi1.data(ContractorInPro);
     vi1.setVisible(true);

    
   

 }else{
 JOptionPane.showMessageDialog(null, "please select a Project");
 }
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tab_projectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tab_projectMouseClicked
    
     tf_p_id.setText(tab_project.getValueAt(tab_project.getSelectedRow(),0).toString());
     tf_p_name.setText(tab_project.getValueAt(tab_project.getSelectedRow(),1).toString());
     try {
    
                Connection con = (Connection) Db.getMyConnection();
                Statement stmt = (Statement) con.createStatement();

                ResultSet rset1 = stmt.executeQuery("select AddressL1,AddressL2,AddressL3,ContractorPrice,ContractorID,AmountPaid,CompanyName from project where ProjectID = '"+tab_project.getValueAt(tab_project.getSelectedRow(),0)+"'");
               
                if(rset1.next()){
                     tf_p_address.setText(rset1.getString("AddressL1"));
                     tf_p_address1.setText(rset1.getString("AddressL2"));
                     tf_p_address2.setText(rset1.getString("AddressL3"));
                     tf_p_value.setText(rset1.getString("ContractorPrice"));
                     tf_p_paid.setText(rset1.getString("AmountPaid"));
                     tf_p_contractor.setText(rset1.getString("CompanyName"));

                     int f = (int)Double.parseDouble(rset1.getString("ContractorPrice"));
                     int g = (int)Double.parseDouble(rset1.getString("AmountPaid"));
                     int h = f-g;

                    
                     tf_p_tobepaid.setText(String.valueOf(h));

                                            pb_ProjectProgress.setMinimum(0);
                                            pb_ProjectProgress.setMaximum(100);
                                            pb_ProjectProgress.setValue( g*100/f);
                                            int x1 = (g*100/f);
                                            
                                            pre1.setText(String.valueOf(x1)+"%");
                ContractorInPro = rset1.getString("ContractorID");
                  
                }
     } catch (Exception e) {
                System.out.println(e);
        }
    }//GEN-LAST:event_tab_projectMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      playSond.ButtonClick();
        adv_retensionBond arb1 = new adv_retensionBond();

     


      arb1.setVisible(true);
      String projectid = tf_p_id.getText();
   arb1.proid(projectid);
          arb1.advbond1();
      


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
playSond.ButtonClick();
        DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
        dft1.setRowCount(0);
  
        int x = cob_map.getSelectedIndex();
        String y = cob_map.getSelectedItem().toString();
        String Type ="";
        String Year1 =tf_p_year.getText();
       
        if(rb_p_pro.isSelected()){
            Type = "Constructions";
        }else if(rb_p_rep.isSelected()){
            Type = "Repairs";
        }



        if(x!=0){

        try {
            Connection con = Db.getMyConnection();
            Statement st = con.createStatement();
            ResultSet rs1 = st.executeQuery("select RequestID from request where JudicalZone = '"+y+"'");
        

            while(rs1.next()){
                String RequesId = rs1.getString("RequestID");

        if(  !y.equals("All") &  !Year1.isEmpty() ){

                Statement st1 = con.createStatement();
                ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+Type+"')&&(RequestID = '"+RequesId+"') &&(Year  = '"+Year1+"') ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                              v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                          }
        }else if(!y.equals("All") & Year1.isEmpty() ){

                 Statement st1 = con.createStatement();
                 ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+Type+"')&&(RequestID = '"+RequesId+"')  ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                              v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                          }
        }
            }    
        if(y.equals("All")){
            System.out.println("all");
                    Statement stt = con.createStatement();
                    ResultSet rs11 = stt.executeQuery("select RequestID from request");

                    while(rs11.next()){
                        String RequesId1 = rs11.getString("RequestID");
                        System.out.println(RequesId1);
                        if(Year1.isEmpty()){

                        Statement st1 = con.createStatement();
                        ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+Type+"')&&(RequestID = '"+RequesId1+"')  ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                              v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                        }

                        } 
                        else if(!Year1.isEmpty()){

                        Statement st1 = con.createStatement();
                        ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+Type+"')&&(RequestID = '"+RequesId1+"')&&(Year  = '"+Year1+"')  ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                              v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                        }
                        }

                        }

        }


        } catch (Exception e) {
            System.out.println(e);
        }

        }else{

        JOptionPane.showMessageDialog(null,"please Select A Zone");

        }




         /*
DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
        dft1.setRowCount(0);

        int x = cob_map.getSelectedIndex();
        String y = cob_map.getSelectedItem().toString();

        String a = "Constructions";
        String b = "Repairs";
        String Year1;
        Year1= tf_p_year.getText();
                            /////////////////////////FOR CONSTRUCTIONS//////////////////////
        // all three conditions are selected
         if(( rb_p_pro.isSelected()) &  (x!=0) & ( !Year1.isEmpty())){
        try{
            Connection con = (Connection) Db.getMyConnection();
            Statement stmt = (Statement) con.createStatement();

            ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
            while (rset1.next())   {

            Vector v2 = new Vector();

            v2.add(rset1.getString("RequestID"));

            String RID = v2.firstElement().toString();

            Statement st1 = con.createStatement();

            ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(RequestID = '"+RID+"') &&(Year  = '"+Year1+"') ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                               v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                          }
            }
        }catch (Exception e){}
         }
  // search result when the Judicial zone and Project type only are selected
else if((rb_p_pro.isSelected()) &&  (x!=0)){
         try{
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();
//         if(( rb_p_pro.isSelected()) &&  (x!=0)){

                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
                        while (rset1.next())   {
                             Statement st1 = con.createStatement();
                             ResultSet rset2 = st1.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+rset1.getString("RequestID")+"'");
                                while(rset2.next()){

                                 Statement st2 = con.createStatement();
                                 ResultSet rset3 = st2.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(RequestID = '"+rset1.getString("RequestID")+"')");
                                            while(rset3.next()){
                                            Vector v2 = new Vector();
                                            v2.add(rset3.getString("ProjectID"));
                                            v2.add(rset3.getString("ProjectName"));
                                             v2.add(rset3.getString("Year"));
                                            dft1.addRow(v2);
                                            }
                                }
                        }
         }

  catch (Exception e) {}

}
  //search result when the judicial zone and the year only are selected

  else if((!Year1.isEmpty()) &&  (x!=0)){
        try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();


                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
                        while (rset1.next())   {
                        Statement st1 = con.createStatement();
                        ResultSet rset2 = st1.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+rset1.getString("RequestID")+"'");
                        while(rset2.next()){

                       Statement st2 = con.createStatement();
                       ResultSet rset3 = st2.executeQuery("select ProjectID,ProjectName,Year  from project where (Year = '"+Year1+"')&&(RequestID = '"+rset1.getString("RequestID")+"')");
                       while(rset3.next()){
                                            Vector v3 = new Vector();
                                            v3.add(rset2.getString("ProjectID"));
                                            v3.add(rset2.getString("ProjectName"));
                                             v3.add(rset3.getString("Year"));
                                            dft1.addRow(v3);
                       }
                                }

         }
} catch (Exception e) {}
  }
  // search result when the project type and the year only are selected
  else  if(( rb_p_pro.isSelected()) &&  (!Year1.isEmpty())){
  try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();
       //  if(( rb_p_pro.isSelected()) &&  (! tf_p_year.getText().isEmpty())){

         ResultSet rset3 = stmt.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(Year = '"+Year1+"')");
        while(rset3.next()){
         Vector v2 = new Vector();
        v2.add(rset3.getString("ProjectID"));
        v2.add(rset3.getString("ProjectName"));
         v2.add(rset3.getString("Year"));
        dft1.addRow(v2);
        }

} catch (Exception e) {}
  }
  ////////////////////FOR REPAIRS////////////////////////////
     // all three conditions are selected
  else  if(( rb_p_rep.isSelected()) &&  (x!=0) && (!Year1.isEmpty())){
        try{
            //if(( rb_p_rep.isSelected()) &&  (x!=0) && (! tf_p_year.getText().isEmpty())){
            Connection con = (Connection) Db.getMyConnection();
            Statement stmt = (Statement) con.createStatement();

            ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
            while (rset1.next())   {
            Vector v2 = new Vector();
            v2.add(rset1.getString("RequestID"));
            String RID = v2.firstElement().toString();
            Statement st1 = con.createStatement();
            ResultSet rset3 = st1.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(RequestID = '"+RID+"') &&(Year  = '"+Year1+"') ");
                          while(rset3.next()){
                              Vector v3 = new Vector();
                              v3.add(rset3.getString("ProjectID"));
                              v3.add(rset3.getString("ProjectName"));
                               v3.add(rset3.getString("Year"));
                              dft1.addRow(v3);
                          }
            }
        }catch (Exception e){}
  }
  // search result when the Judicial zone and Project type only are selected
else  if(( rb_p_rep.isSelected()) &&  (x!=0)){

         try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();
      //   if(( rb_p_rep.isSelected()) &&  (x!=0)){

                        ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
                        while (rset1.next())   {
                             Statement st1 = con.createStatement();
                             ResultSet rset2 = st1.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+rset1.getString("RequestID")+"'");
                                while(rset2.next()){

                                 Statement st2 = con.createStatement();
                                 ResultSet rset3 = st2.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(RequestID = '"+rset1.getString("RequestID")+"')");
                                            while(rset3.next()){
                                            Vector v2 = new Vector();
                                            v2.add(rset3.getString("ProjectID"));
                                            v2.add(rset3.getString("ProjectName"));
                                             v2.add(rset3.getString("Year"));
                                            dft1.addRow(v2);
                                            }
                                }
                        }

       } catch (Exception e) {}
}


  // search result when the project type and the year only are selected
 else    if(( rb_p_rep.isSelected()) &&  ( !Year1.isEmpty())){
     try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();


         ResultSet rset3 = stmt.executeQuery("select ProjectID,ProjectName,Year  from project where (ProjectType = '"+a+"')&&(Year = '"+Year1+"')");
        while(rset3.next()){
         Vector v2 = new Vector();
        v2.add(rset3.getString("ProjectID"));
        v2.add(rset3.getString("ProjectName"));
         v2.add(rset3.getString("Year"));
        dft1.addRow(v2);
        }

} catch (Exception e) {}
 }

                                 ////////////////////one way search/////////////////
  // for construction radio button only
 else if(rb_p_pro.isSelected()){
        try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();
         ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName,Year from project where ProjectType = '"+a+"' ");
         while(rset1.next()){
                    Vector v1 = new Vector();
                    v1.add(rset1.getString("ProjectID"));
                    v1.add(rset1.getString("ProjectName"));
                    v1.add(rset1.getString("Year"));
                    dft1.addRow(v1);
            }
       } catch (Exception e) {}
}
  // for repair radio buttonb only
 else  if((! rb_p_pro.isSelected())& (rb_p_rep.isSelected())){
  try {
            Connection con = (Connection) Db.getMyConnection();
            Statement stmt = (Statement) con.createStatement();
             ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName,Year from project where ProjectType = '"+b+"' ");
             while(rset1.next()){
             Vector v1 = new Vector();
             v1.add(rset1.getString("ProjectID"));
             v1.add(rset1.getString("ProjectName"));
             v1.add(rset1.getString("Year"));
             dft1.addRow(v1);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
 }
  // for year text field only
 else if ( !Year1.isEmpty()){
            try {
                Connection con = (Connection) Db.getMyConnection();
                Statement stmt = (Statement) con.createStatement();
               ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName,Year from project where Year like '"+Year1+"%'");

                while(rset1.next()){
                    Vector v1 = new Vector();
                    v1.add(rset1.getString("ProjectID"));
                    v1.add(rset1.getString("ProjectName"));
                     v1.add(rset1.getString("Year"));
                    dft1.addRow(v1);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
  //  for combo box selection only
   else if( (x!=0)){
        try {
         Connection con = (Connection) Db.getMyConnection();
         Statement stmt = (Statement) con.createStatement();
                    ResultSet rset1= stmt.executeQuery("select RequestID from request where JudicalZone = '"+y+"' ");
                        while (rset1.next())   {
                        Statement st1 = con.createStatement();
                        ResultSet rset2 = st1.executeQuery("select ProjectID,ProjectName,Year from project where RequestID = '"+rset1.getString("RequestID")+"'");
                        while(rset2.next()){
                            Vector v3 = new Vector();
                            v3.add(rset2.getString("ProjectID"));
                            v3.add(rset2.getString("ProjectName"));
                            v3.add(rset2.getString("Year"));
                            dft1.addRow(v3);
                       }
                                }
} catch (Exception e) {}
  }


*/
                            
      
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
playSond.ButtonClick();
        retension_bond rb1 = new retension_bond();
      rb1.setVisible(true);
      String projectid = tf_p_id.getText();
      retension_bond.proid(projectid);
      rb1.retbond1();
      
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        playSond.ButtonClick();
        per_bidBond pbb1 = new per_bidBond();
     
        String projectid1= tf_p_id.getText();
        
        pbb1.proid(projectid1);
        pbb1.per_bidbond1();
        pbb1.setVisible(true);

    }//GEN-LAST:event_jButton6ActionPerformed

    private void tf_p_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_p_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_p_idActionPerformed

    private void tf_p_yearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_p_yearKeyReleased
        DefaultTableModel dft1 = (DefaultTableModel) tab_project.getModel();
        dft1.setRowCount(0);
        if (! tf_p_year.getText().isEmpty()){
            try {
                Connection con = (Connection) Db.getMyConnection();
                Statement stmt = (Statement) con.createStatement();
                ResultSet rset1 = stmt.executeQuery("select ProjectID,ProjectName,Year from project where Year like '"+tf_p_year.getText()+"%'");

                while(rset1.next()){
                    Vector v1 = new Vector();
                    v1.add(rset1.getString("ProjectID"));
                    v1.add(rset1.getString("ProjectName"));
                    v1.add(rset1.getString("Year"));

                    dft1.addRow(v1);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
}//GEN-LAST:event_tf_p_yearKeyReleased

    private void tf_p_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_p_yearActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tf_p_yearActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
         try {

            UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());


        } catch (Exception e) {
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Project1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cob_map;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel label_map;
    private javax.swing.JProgressBar pb_ProjectProgress;
    private javax.swing.JLabel pre1;
    private javax.swing.JRadioButton rb_p_pro;
    private javax.swing.JRadioButton rb_p_rep;
    private javax.swing.JTable tab_project;
    private javax.swing.JTextField tf_p_address;
    private javax.swing.JTextField tf_p_address1;
    private javax.swing.JTextField tf_p_address2;
    private javax.swing.JTextField tf_p_contractor;
    private javax.swing.JTextField tf_p_id;
    private javax.swing.JTextField tf_p_name;
    private javax.swing.JTextField tf_p_paid;
    private javax.swing.JTextField tf_p_tobepaid;
    private javax.swing.JTextField tf_p_value;
    private javax.swing.JTextField tf_p_year;
    // End of variables declaration//GEN-END:variables

}
